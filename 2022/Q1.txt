//User Model

const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const UserSchema = new mongoose.Schema({
  userName: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  userType: { type: String, enum: ['admin', 'lecturer', 'student'], required: true },
  other: {
    subjects: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Module' }], // For lecturers
    academicYear: { type: Number, min: 1, max: 4 }, // For students
    enrolledModules: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Module' }] // For students
  }
});

UserSchema.pre('save', async function(next) {
  if (!this.isModified('password')) return next();
  this.password = await bcrypt.hash(this.password, 10);
  next();
});

module.exports = mongoose.model('User', UserSchema);

// Module Model (models/Module.js)

const mongoose = require('mongoose');

const ModuleSchema = new mongoose.Schema({
  moduleName: { type: String, required: true },
  duration: { type: Number, required: true }, // in hours
  lecturerIds: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],
  academicYear: { type: Number, min: 1, max: 4, required: true }
});

module.exports = mongoose.model('Module', ModuleSchema);

//Timetable Model (models/Timetable.js)

const mongoose = require('mongoose');

const TimetableSchema = new mongoose.Schema({
  moduleId: { type: mongoose.Schema.Types.ObjectId, ref: 'Module', required: true },
  lectureHall: { type: Number, min: 1, max: 10, required: true },
  day: { type: String, enum: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'], required: true },
  startTime: { type: String, required: true }, // Format: "HH:MM"
  endTime: { type: String, required: true },
  academicYear: { type: Number, min: 1, max: 4, required: true }
});

module.exports = mongoose.model('Timetable', TimetableSchema);

//User DAO (dao/userDAO.js)

const User = require('../models/User');

module.exports = {
  createUser: async (userData) => await User.create(userData),
  findUserById: async (id) => await User.findById(id),
  findUserByEmail: async (email) => await User.findOne({ email }),
  updateUser: async (id, updateData) => await User.findByIdAndUpdate(id, updateData, { new: true }),
  deleteUser: async (id) => await User.findByIdAndDelete(id),
  getAllUsers: async (filter = {}) => await User.find(filter)
};

//Module DAO (dao/moduleDAO.js)

const Module = require('../models/Module');

module.exports = {
  createModule: async (moduleData) => await Module.create(moduleData),
  findModuleById: async (id) => await Module.findById(id).populate('lecturerIds'),
  updateModule: async (id, updateData) => await Module.findByIdAndUpdate(id, updateData, { new: true }),
  deleteModule: async (id) => await Module.findByIdAndDelete(id),
  getModulesByAcademicYear: async (academicYear) => await Module.find({ academicYear }).populate('lecturerIds')
};

// Timetable DAO (dao/timetableDAO.js)

const Timetable = require('../models/Timetable');

module.exports = {
  createTimetableEntry: async (entryData) => await Timetable.create(entryData),
  getTimetableByModule: async (moduleId) => await Timetable.find({ moduleId }).populate('moduleId'),
  getTimetableByAcademicYear: async (academicYear) => await Timetable.find({ academicYear }).populate('moduleId'),
  getTimetableByLecturer: async (lecturerId) => await Timetable.find().populate({
    path: 'moduleId',
    match: { lecturerIds: lecturerId }
  }),
  updateTimetableEntry: async (id, updateData) => await Timetable.findByIdAndUpdate(id, updateData, { new: true }),
  deleteTimetableEntry: async (id) => await Timetable.findByIdAndDelete(id)
};

//User Controller (controllers/userController.js)

const userDAO = require('../dao/userDAO');

module.exports = {
  register: async (ctx) => {
    try {
      const user = await userDAO.createUser(ctx.request.body);
      ctx.status = 201;
      ctx.body = user;
    } catch (err) {
      ctx.status = 400;
      ctx.body = { error: err.message };
    }
  },
  getProfile: async (ctx) => {
    try {
      const user = await userDAO.findUserById(ctx.params.id);
      if (!user) ctx.throw(404, 'User not found');
      ctx.body = user;
    } catch (err) {
      ctx.status = 500;
      ctx.body = { error: err.message };
    }
  }
};

// Module Controller (controllers/moduleController.js)

const moduleDAO = require('../dao/moduleDAO');

module.exports = {
  createModule: async (ctx) => {
    try {
      const module = await moduleDAO.createModule(ctx.request.body);
      ctx.status = 201;
      ctx.body = module;
    } catch (err) {
      ctx.status = 400;
      ctx.body = { error: err.message };
    }
  },
  getModulesByYear: async (ctx) => {
    try {
      const modules = await moduleDAO.getModulesByAcademicYear(ctx.params.year);
      ctx.body = modules;
    } catch (err) {
      ctx.status = 500;
      ctx.body = { error: err.message };
    }
  }
};

// User Routes (routes/userRoutes.js)

const Router = require('koa-router');
const userController = require('../controllers/userController');
const authMiddleware = require('../middlewares/auth');

const router = new Router();

router.post('/', authMiddleware('admin'), userController.register);
router.get('/:id', authMiddleware(), userController.getProfile);

module.exports = router;

// Module Routes (routes/moduleRoutes.js)

const Router = require('koa-router');
const moduleController = require('../controllers/moduleController');
const authMiddleware = require('../middlewares/auth');

const router = new Router();

router.post('/', authMiddleware('admin'), moduleController.createModule);
router.get('/year/:year', authMiddleware(), moduleController.getModulesByYear);

module.exports = router;

//App Configuration (app.js)

const Koa = require('koa');
const mongoose = require('mongoose');
const bodyParser = require('koa-bodyparser');
const userRoutes = require('./routes/userRoutes');
const moduleRoutes = require('./routes/moduleRoutes');
const timetableRoutes = require('./routes/timetableRoutes');

const app = new Koa();

// Database connection
mongoose.connect('mongodb://localhost:27017/timetableDB', {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

// Middleware
app.use(bodyParser());

// Routes
app.use(userRoutes.routes());
app.use(moduleRoutes.routes());
app.use(timetableRoutes.routes());

const PORT = 3000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));

# Timetable Management System - Spring Boot Solution

## Question 1: Backend Implementation (60 Marks)

### Directory Structure
```
src/main/java/com/university/timetable/
├── config/
│   └── MongoConfig.java
├── controller/
│   ├── AuthController.java
│   ├── ModuleController.java
│   ├── TimetableController.java
│   └── UserController.java
├── repository/
│   ├── ModuleRepository.java
│   ├── TimetableRepository.java
│   └── UserRepository.java
├── model/
│   ├── Module.java
│   ├── Timetable.java
│   └── User.java
├── service/
│   ├── ModuleService.java
│   ├── TimetableService.java
│   └── UserService.java
├── security/
│   └── SecurityConfig.java
└── TimetableApplication.java
```

### 1. Data Models

#### User Model
```java
package com.university.timetable.model;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import java.util.*;

@Document(collection = "users")
public class User implements UserDetails {
    @Id
    private String userId;
    private String userName;
    private String email;
    private String password;
    private String userType; // ADMIN, LECTURER, STUDENT
    private Map<String, Object> other = new HashMap<>();

    // Getters and Setters
    public String getUserId() { return userId; }
    public void setUserId(String userId) { this.userId = userId; }
    public String getUserName() { return userName; }
    public void setUserName(String userName) { this.userName = userName; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }
    public String getUserType() { return userType; }
    public void setUserType(String userType) { this.userType = userType; }
    public Map<String, Object> getOther() { return other; }
    public void setOther(Map<String, Object> other) { this.other = other; }

    // UserDetails methods
    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return Collections.singletonList(new SimpleGrantedAuthority("ROLE_" + userType));
    }
    @Override public String getUsername() { return email; }
    @Override public boolean isAccountNonExpired() { return true; }
    @Override public boolean isAccountNonLocked() { return true; }
    @Override public boolean isCredentialsNonExpired() { return true; }
    @Override public boolean isEnabled() { return true; }
}
```

#### Module Model
```java
package com.university.timetable.model;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;
import java.util.List;

@Document(collection = "modules")
public class Module {
    @Id
    private String moduleId;
    private String moduleName;
    private int duration; // in hours
    private List<String> lecturerIds;
    private int academicYear; // 1-4

    // Getters and Setters
    public String getModuleId() { return moduleId; }
    public void setModuleId(String moduleId) { this.moduleId = moduleId; }
    public String getModuleName() { return moduleName; }
    public void setModuleName(String moduleName) { this.moduleName = moduleName; }
    public int getDuration() { return duration; }
    public void setDuration(int duration) { this.duration = duration; }
    public List<String> getLecturerIds() { return lecturerIds; }
    public void setLecturerIds(List<String> lecturerIds) { this.lecturerIds = lecturerIds; }
    public int getAcademicYear() { return academicYear; }
    public void setAcademicYear(int academicYear) { this.academicYear = academicYear; }
}
```

#### Timetable Model
```java
package com.university.timetable.model;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;
import java.time.LocalTime;

@Document(collection = "timetable")
public class Timetable {
    @Id
    private String id;
    private String moduleId;
    private int lectureHall; // 1-10
    private String day; // MONDAY-FRIDAY
    private LocalTime startTime;
    private LocalTime endTime;
    private int academicYear; // 1-4

    // Getters and Setters
    public String getId() { return id; }
    public void setId(String id) { this.id = id; }
    public String getModuleId() { return moduleId; }
    public void setModuleId(String moduleId) { this.moduleId = moduleId; }
    public int getLectureHall() { return lectureHall; }
    public void setLectureHall(int lectureHall) { this.lectureHall = lectureHall; }
    public String getDay() { return day; }
    public void setDay(String day) { this.day = day; }
    public LocalTime getStartTime() { return startTime; }
    public void setStartTime(LocalTime startTime) { this.startTime = startTime; }
    public LocalTime getEndTime() { return endTime; }
    public void setEndTime(LocalTime endTime) { this.endTime = endTime; }
    public int getAcademicYear() { return academicYear; }
    public void setAcademicYear(int academicYear) { this.academicYear = academicYear; }
}
```

### 2. Repository Interfaces (DAO)

#### UserRepository
```java
package com.university.timetable.repository;

import com.university.timetable.model.User;
import org.springframework.data.mongodb.repository.MongoRepository;
import java.util.Optional;

public interface UserRepository extends MongoRepository<User, String> {
    Optional<User> findByEmail(String email);
    List<User> findByUserType(String userType);
}
```

#### ModuleRepository
```java
package com.university.timetable.repository;

import com.university.timetable.model.Module;
import org.springframework.data.mongodb.repository.MongoRepository;
import java.util.List;

public interface ModuleRepository extends MongoRepository<Module, String> {
    List<Module> findByAcademicYear(int academicYear);
    List<Module> findByLecturerIdsContaining(String lecturerId);
}
```

#### TimetableRepository
```java
package com.university.timetable.repository;

import com.university.timetable.model.Timetable;
import org.springframework.data.mongodb.repository.MongoRepository;
import java.util.List;

public interface TimetableRepository extends MongoRepository<Timetable, String> {
    List<Timetable> findByModuleId(String moduleId);
    List<Timetable> findByAcademicYear(int academicYear);
    List<Timetable> findByDayAndStartTimeBetween(String day, LocalTime start, LocalTime end);
}
```

### 3. Service Layer

#### UserService
```java
package com.university.timetable.service;

import com.university.timetable.model.User;
import com.university.timetable.repository.UserRepository;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class UserService {
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;

    public UserService(UserRepository userRepository, PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
    }

    public User registerUser(User user) {
        user.setPassword(passwordEncoder.encode(user.getPassword()));
        return userRepository.save(user);
    }

    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    public User getUserById(String id) {
        return userRepository.findById(id).orElse(null);
    }

    public User updateUser(String id, User userDetails) {
        User user = getUserById(id);
        if(user != null) {
            user.setUserName(userDetails.getUserName());
            user.setEmail(userDetails.getEmail());
            if(userDetails.getPassword() != null) {
                user.setPassword(passwordEncoder.encode(userDetails.getPassword()));
            }
            user.setUserType(userDetails.getUserType());
            user.setOther(userDetails.getOther());
            return userRepository.save(user);
        }
        return null;
    }

    public void deleteUser(String id) {
        userRepository.deleteById(id);
    }

    public List<User> getUsersByType(String userType) {
        return userRepository.findByUserType(userType);
    }
}
```

#### ModuleService
```java
package com.university.timetable.service;

import com.university.timetable.model.Module;
import com.university.timetable.repository.ModuleRepository;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class ModuleService {
    private final ModuleRepository moduleRepository;

    public ModuleService(ModuleRepository moduleRepository) {
        this.moduleRepository = moduleRepository;
    }

    public Module createModule(Module module) {
        return moduleRepository.save(module);
    }

    public List<Module> getAllModules() {
        return moduleRepository.findAll();
    }

    public Module getModuleById(String id) {
        return moduleRepository.findById(id).orElse(null);
    }

    public Module updateModule(String id, Module moduleDetails) {
        Module module = getModuleById(id);
        if(module != null) {
            module.setModuleName(moduleDetails.getModuleName());
            module.setDuration(moduleDetails.getDuration());
            module.setLecturerIds(moduleDetails.getLecturerIds());
            module.setAcademicYear(moduleDetails.getAcademicYear());
            return moduleRepository.save(module);
        }
        return null;
    }

    public void deleteModule(String id) {
        moduleRepository.deleteById(id);
    }

    public List<Module> getModulesByYear(int academicYear) {
        return moduleRepository.findByAcademicYear(academicYear);
    }

    public List<Module> getModulesByLecturer(String lecturerId) {
        return moduleRepository.findByLecturerIdsContaining(lecturerId);
    }
}
```

#### TimetableService
```java
package com.university.timetable.service;

import com.university.timetable.model.Timetable;
import com.university.timetable.repository.TimetableRepository;
import org.springframework.stereotype.Service;
import java.time.LocalTime;
import java.util.List;

@Service
public class TimetableService {
    private final TimetableRepository timetableRepository;

    public TimetableService(TimetableRepository timetableRepository) {
        this.timetableRepository = timetableRepository;
    }

    public Timetable createTimetableEntry(Timetable timetable) {
        return timetableRepository.save(timetable);
    }

    public List<Timetable> getAllTimetableEntries() {
        return timetableRepository.findAll();
    }

    public Timetable getTimetableEntryById(String id) {
        return timetableRepository.findById(id).orElse(null);
    }

    public Timetable updateTimetableEntry(String id, Timetable timetableDetails) {
        Timetable timetable = getTimetableEntryById(id);
        if(timetable != null) {
            timetable.setModuleId(timetableDetails.getModuleId());
            timetable.setLectureHall(timetableDetails.getLectureHall());
            timetable.setDay(timetableDetails.getDay());
            timetable.setStartTime(timetableDetails.getStartTime());
            timetable.setEndTime(timetableDetails.getEndTime());
            timetable.setAcademicYear(timetableDetails.getAcademicYear());
            return timetableRepository.save(timetable);
        }
        return null;
    }

    public void deleteTimetableEntry(String id) {
        timetableRepository.deleteById(id);
    }

    public List<Timetable> getTimetableByModule(String moduleId) {
        return timetableRepository.findByModuleId(moduleId);
    }

    public List<Timetable> getTimetableByYear(int academicYear) {
        return timetableRepository.findByAcademicYear(academicYear);
    }

    public List<Timetable> getTimetableByDay(String day) {
        return timetableRepository.findByDayAndStartTimeBetween(day, 
            LocalTime.of(9, 0), LocalTime.of(17, 0));
    }
}
```

### 4. Controller Layer

#### UserController
```java
package com.university.timetable.controller;

import com.university.timetable.model.User;
import com.university.timetable.service.UserService;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/users")
public class UserController {
    private final UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    @PostMapping
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<User> registerUser(@RequestBody User user) {
        return ResponseEntity.ok(userService.registerUser(user));
    }

    @GetMapping
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<List<User>> getAllUsers() {
        return ResponseEntity.ok(userService.getAllUsers());
    }

    @GetMapping("/{id}")
    public ResponseEntity<User> getUserById(@PathVariable String id) {
        User user = userService.getUserById(id);
        return user != null ? ResponseEntity.ok(user) : ResponseEntity.notFound().build();
    }

    @PutMapping("/{id}")
    public ResponseEntity<User> updateUser(@PathVariable String id, @RequestBody User userDetails) {
        User updatedUser = userService.updateUser(id, userDetails);
        return updatedUser != null ? ResponseEntity.ok(updatedUser) : ResponseEntity.notFound().build();
    }

    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Void> deleteUser(@PathVariable String id) {
        userService.deleteUser(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping("/type/{userType}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<List<User>> getUsersByType(@PathVariable String userType) {
        return ResponseEntity.ok(userService.getUsersByType(userType));
    }
}
```

#### ModuleController
```java
package com.university.timetable.controller;

import com.university.timetable.model.Module;
import com.university.timetable.service.ModuleService;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/modules")
public class ModuleController {
    private final ModuleService moduleService;

    public ModuleController(ModuleService moduleService) {
        this.moduleService = moduleService;
    }

    @PostMapping
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Module> createModule(@RequestBody Module module) {
        return ResponseEntity.ok(moduleService.createModule(module));
    }

    @GetMapping
    public ResponseEntity<List<Module>> getAllModules() {
        return ResponseEntity.ok(moduleService.getAllModules());
    }

    @GetMapping("/{id}")
    public ResponseEntity<Module> getModuleById(@PathVariable String id) {
        Module module = moduleService.getModuleById(id);
        return module != null ? ResponseEntity.ok(module) : ResponseEntity.notFound().build();
    }

    @PutMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Module> updateModule(@PathVariable String id, @RequestBody Module moduleDetails) {
        Module updatedModule = moduleService.updateModule(id, moduleDetails);
        return updatedModule != null ? ResponseEntity.ok(updatedModule) : ResponseEntity.notFound().build();
    }

    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Void> deleteModule(@PathVariable String id) {
        moduleService.deleteModule(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping("/year/{academicYear}")
    public ResponseEntity<List<Module>> getModulesByYear(@PathVariable int academicYear) {
        return ResponseEntity.ok(moduleService.getModulesByYear(academicYear));
    }

    @GetMapping("/lecturer/{lecturerId}")
    public ResponseEntity<List<Module>> getModulesByLecturer(@PathVariable String lecturerId) {
        return ResponseEntity.ok(moduleService.getModulesByLecturer(lecturerId));
    }
}
```

#### TimetableController
```java
package com.university.timetable.controller;

import com.university.timetable.model.Timetable;
import com.university.timetable.service.TimetableService;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/timetable")
public class TimetableController {
    private final TimetableService timetableService;

    public TimetableController(TimetableService timetableService) {
        this.timetableService = timetableService;
    }

    @PostMapping
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Timetable> createTimetableEntry(@RequestBody Timetable timetable) {
        return ResponseEntity.ok(timetableService.createTimetableEntry(timetable));
    }

    @GetMapping
    public ResponseEntity<List<Timetable>> getAllTimetableEntries() {
        return ResponseEntity.ok(timetableService.getAllTimetableEntries());
    }

    @GetMapping("/{id}")
    public ResponseEntity<Timetable> getTimetableEntryById(@PathVariable String id) {
        Timetable timetable = timetableService.getTimetableEntryById(id);
        return timetable != null ? ResponseEntity.ok(timetable) : ResponseEntity.notFound().build();
    }

    @PutMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Timetable> updateTimetableEntry(@PathVariable String id, @RequestBody Timetable timetableDetails) {
        Timetable updatedTimetable = timetableService.updateTimetableEntry(id, timetableDetails);
        return updatedTimetable != null ? ResponseEntity.ok(updatedTimetable) : ResponseEntity.notFound().build();
    }

    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Void> deleteTimetableEntry(@PathVariable String id) {
        timetableService.deleteTimetableEntry(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping("/module/{moduleId}")
    public ResponseEntity<List<Timetable>> getTimetableByModule(@PathVariable String moduleId) {
        return ResponseEntity.ok(timetableService.getTimetableByModule(moduleId));
    }

    @GetMapping("/year/{academicYear}")
    public ResponseEntity<List<Timetable>> getTimetableByYear(@PathVariable int academicYear) {
        return ResponseEntity.ok(timetableService.getTimetableByYear(academicYear));
    }

    @GetMapping("/day/{day}")
    public ResponseEntity<List<Timetable>> getTimetableByDay(@PathVariable String day) {
        return ResponseEntity.ok(timetableService.getTimetableByDay(day));
    }
}
```

### 5. Security Configuration

```java
package com.university.timetable.security;

import com.university.timetable.service.UserService;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {
    private final UserService userService;

    public SecurityConfig(UserService userService) {
        this.userService = userService;
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(userService).passwordEncoder(passwordEncoder());
    }

    @Bean
    @Override
    public AuthenticationManager authenticationManagerBean() throws Exception {
        return super.authenticationManagerBean();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.csrf().disable()
            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
            .and()
            .authorizeRequests()
            .antMatchers("/api/auth/**").permitAll()
            .antMatchers("/api/users").hasRole("ADMIN")
            .antMatchers("/api/modules").hasRole("ADMIN")
            .antMatchers("/api/timetable").hasRole("ADMIN")
            .anyRequest().authenticated();
    }
}
```

### 6. Main Application Class

```java
package com.university.timetable;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.data.mongodb.config.EnableMongoAuditing;

@SpringBootApplication
@EnableMongoAuditing
public class TimetableApplication {
    public static void main(String[] args) {
        SpringApplication.run(TimetableApplication.class, args);
    }
}
```

### 7. MongoDB Configuration

```java
package com.university.timetable.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.data.mongodb.config.EnableMongoAuditing;
import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;

@Configuration
@EnableMongoRepositories(basePackages = "com.university.timetable.repository")
@EnableMongoAuditing
public class MongoConfig {
}
```

### 8. application.properties

```properties
spring.data.mongodb.uri=mongodb://localhost:27017/timetable_db
spring.data.mongodb.database=timetable_db

server.port=8080

spring.security.user.name=admin
spring.security.user.password=admin123
spring.security.user.roles=ADMIN
```

This Spring Boot implementation provides a complete backend solution that:
1. Uses proper data models for users, modules, and timetable
2. Implements repository interfaces (DAO) for database operations
3. Includes service layer for business logic
4. Defines REST controllers with proper authentication
5. Handles errors appropriately
6. Follows RESTful API design principles
7. Includes security configuration
8. Uses MongoDB for data persistence

All requirements from the question are fulfilled including user roles, module management, and timetable scheduling.